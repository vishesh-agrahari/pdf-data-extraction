from PIL import Image
from pyzbar import pyzbar
import pytesseract
import cv2
import re
import csv
import json
import pandas as pd
import tabula
from pdf2image import convert_from_path
import time
import PyPDF2


# extract qr code and barcode data from pdf
def extractQrDataBarCodeData(n):
    qrCodeData = []
    barCodeData = []
    qrCodeData_and_barCodeData = []
    for i in range(n):
        # read images using opencv
        img = cv2.imread('pdf2image\\page' + str(i) + '.jpg')
        barcodes = pyzbar.decode(img)
        flag = 0
        for barcode in barcodes:
            bdata = barcode.data.decode()
            if (flag % 2 == 0):
                qrCodeData.append(bdata)
            else:
                barCodeData.append(bdata)
            flag += 1
    qrCodeData_and_barCodeData.append(qrCodeData)
    qrCodeData_and_barCodeData.append(barCodeData)
    return qrCodeData_and_barCodeData


# extract fields from text -pattern-A
def extract_keysA(image):
    text = pytesseract.image_to_string(Image.open(image), lang="eng")
    reg_for_keys = '.*:'
    keys = re.findall(reg_for_keys, text)
    keys.pop()
    keys.pop()
    regf = '[0-9].*[0-9]:'
    for i in range(len(keys)):
        keys[i] = re.sub(regf, '', keys[i])
    keys.insert(0, 'page_no')
    return keys


# extract valuess from text -pattern-A
def extract_valuesA(n,keys):
    values = []
    for j in range(n):
        image = 'pdf2image\\page' + str(j) + '.jpg'
        text = pytesseract.image_to_string(Image.open(image), lang="eng")
        value = []
        for i in range(len(keys) - 1):
            start = text.find(keys[i]) + len(keys[i])
            end = text.find(keys[i + 1])
            t=text[start:end].replace("\n","")
            value.append(t)
        last_value = text[(text.find('Transport Doc No and Date :')+len('Transport Doc No and Date :')):text.find('PART-B')].replace("\n","")
        value.append(last_value)
        value.insert(0, j + 1)
        values.append(value)
    return values
# extract fields from text -pattern-B
def extract_keysB():
    keys = ['page no','eWay Bill No:', 'Mode:', 'Type:', 'Generated Date:', 'Valid Upto:', 'Approx Distance:','Documents Details:', 'Generated By:','Transacon Type:','From:','To:','Transporter Id and Name:','Transporter DocNo and Date:']
    return keys

# extract values from text -pattern-B
def extract_valuesB(pdfPath,keys):
    values =[]
    pdfFileObj = open(pdfPath, 'rb')
    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
    num_of_pages = pdfReader.numPages
    for j in range(num_of_pages):
        text = pdfReader.getPage(j).extractText()
        text1 = text[text.find('1. E-Way Bill Details'):text.find('2. Address Details')]
        text2 = text[text.find('2. Address Details'):text.find('3. Goods Details')]
        text4 = text[text.find('4. Transportaon Details'):text.find('5. Vehicle Details')]
        value =[]
        # extract EwayBill details in part1
        for i in range(len(keys)-1):
              start = text1.find(keys[i])+len(keys[i])
              end = text1.find(keys[i+1])
              value.append(text1[start:end])
        mode_type = value[1].split('\n')
        value[1]=mode_type[0]
        value[2]=mode_type[1]
        value.append(text1[(text1.find('Transacon Type:') + len('Transacon Type:')):text1.find('2. Address Details')])
        for i in range(len(value)):
            value[i]=value[i].replace('\n',' ')
        # extract Address details in part2
        from_address = text2[text2.find('GSTIN'):text2.find('GSTIN',text2.find('GSTIN')+5)].replace('\n',' ')
        value.append(from_address)
        to_address = text2[text2.find('GSTIN',text2.find('GSTIN')+5):].replace('\n',' ')
        value.append(to_address)
        # extract transporter details in part4
        v1 = text4[(text4.find('Transporter Id and Name:') + len('Transporter Id and Name:')):text4.find('Transporter DocNo and Date:')]
        value.append(v1)
        v2 = text4[(text4.find('Transporter DocNo and Date:') + len('Transporter DocNo and Date:')):].replace('\n','')
        value.append(v2)
        value.insert(0,j+1)
    pdfFileObj.close()
    values.append(value)
    return values


# write data to csv file
def write_to_csv(keys, values, filePath):
    # write keys in csv file
    with open(filePath, 'w', encoding='UTF8') as f:
        writer = csv.writer(f)
        writer.writerow(keys)
    # writing the values into the file
    with open(filePath, 'a+', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(values)


# convert csv file to json
def write_to_json(csvFilePath, jsonFilePath, mode, datafrom):
    # read csv file
    jsonArray = {}
    with open(csvFilePath, encoding='utf-8') as csvf:
        # load csv file data using csv library's dictionary reader
        csvReader = csv.DictReader(csvf)
        jsonArray[datafrom] = []
        # convert each csv row into python dict
        for row in csvReader:
            # add this python dict to json array
            jsonArray[datafrom].append(row)

    # convert python jsonArray to JSON String and write to file
    with open(jsonFilePath, mode, encoding='utf-8') as jsonf:
        jsonString = json.dumps(jsonArray, indent=4)
        jsonf.write(jsonString)


# convert csvfile to json
def write_to_excel(csvFilePath, excelFilePath, sheetname, mode):
    # reading the csv file to dataframe
    df = pd.read_csv(csvFilePath)

    # converting the .csv file to .xlsx file
    with pd.ExcelWriter(excelFilePath, mode=mode) as writer:
        df.to_excel(writer, index=False, sheet_name=sheetname)


# convert string to list - qrcode data
def convert_to_List(string,i):
    li = list(string.split(" "))
    if(re.search("^[a-zA-Z]", li[1]) != None):
        for k in range(2,len(li)-1):
            li[1]= li[1]+ ' '+ li[k]
        while(len(li)!=3):
            li.pop(2)
    else:
        li[1] = li[1] + ' ' + li[2] + li[3]
        li[4] = li[4] + ' ' + li[5] + li[6]
        li.pop(2)
        li.pop(2)
        li.pop(3)
        li.pop(3)
    li.insert(0, i)
    return li


# extract field and row values for qrcode data
def extract_Keys_And_Values_Qrcodedata(Qrcode_data):
    # extract values of barcode data
    sublist = ['EwbNo :-','EWB No.:', 'EwbDt : -','Gen. Dt.:', 'EwbValidTill :-', 'Gen By:-','Gen. By:']
    values = []
    i = 1
    for d in Qrcode_data:
        for sub in sublist:
            d = d.replace(sub, ' ')
        res = " ".join(d.split())
        res_list = convert_to_List(res, i)
        if(len(res_list)==4):
            res_list.insert(2,' ')
            res_list.insert(4,' ')
        else:
            res_list.insert(3,' ')
        values.append(res_list)
        i += 1

    # field values for qrcode data
    header = ['page no', 'EwbNo', 'EwbDt', 'Gen Dt','EwbValidTill', 'Gen By']

    result = []
    result.append(header)
    result.append(values)
    return result


# extract field and row values for barcode data
def extract_Keys_And_Values_Barcodedata(barcode_Data):
    # Add header in csv file
    header = ['page no', 'BarCode Data']

    # extract values of barcode data
    values = []
    start = 0
    end = 1
    for i in range(len(barcode_Data)):
        values.append(barcode_Data[start:end])
        values[i].insert(0, i + 1)
        start += 1
        end += 1

    result = []
    result.append(header)
    result.append(values)
    return result


# convert table into csv file present in part-B
def convertTableIntoCsv(pdfPath,n):
    for i in range(1, n + 1):
       tabula.convert_into(pdfPath, "temptablecsv\\temp_data" + str(i) + ".csv", output_format="csv", pages=i)

# define fields for table data
def extractTableFieldsA():
    fields = ['Page no', 'Mode', 'Vehicle No/Trans Doc No &Trans Doc Dt.', 'From', 'Entered Date', 'Entered By',
                  'Multi Veh Info (if any)']
    return fields

# extract rows from temp_csv file for table data
def extractTableValuesA(n):
    rows = []
    for i in range(1,n+1):
        with open("temptablecsv\\temp_data" + str(i)+ ".csv", 'r') as csvfile:
            # creating a csv reader object
            csvreader = csv.reader(csvfile)
            for temp in csvreader:
                   if(len(temp)>=5 and (temp[3].endswith('AM') or temp[3].endswith('PM'))):
                       temp.insert(0,i)
                       rows.append(temp)
    return rows

# extract fields for table data
def extractTableFieldsB(tempcsvfilepath):
    table1Fields = []
    table2Fields = []
    fields=[]
    with open(tempcsvfilepath, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        table1Fields = next(csvreader)
        next(csvreader)
        table2Fields = next(csvreader)
    fields.append(table1Fields)
    fields.append(table2Fields)
    return fields

# extract rows from temp_csv file for table data
def extractTableValuesB(n):
    table1Values=[]
    table2Values=[]
    values = []
    for i in range(1,n+1):
        with open("temptablecsv\\temp_data" + str(i)+ ".csv", 'r') as csvfile:
            # creating a csv reader object
            csvreader = csv.reader(csvfile)
            next(csvreader)
            table1Values.append(next(csvreader))
            next(csvreader)
            table2Values.append(next(csvreader))
    print(table2Values)
    values.append(table1Values)
    values.append(table2Values)
    return values


# converting pdf to image
def convert_pdf_to_image(pdf_path):
    st = time.time()
    images = convert_from_path(pdf_path, poppler_path=r"C:\Users\visheshAgrahari\Downloads\poppler-0.68.0\bin")
    for i in range(len(images)):
        # Save pages as images
        images[i].save('pdf2image\\page' + str(i) + '.jpg', 'JPEG')
    ed = time.time()
    print("total time: ", (ed - st))
    return len(images)

# check the pattern of pdf
def checkPdfPattern(pdfPath):
    pdfFileObj = open(pdfPath, 'rb')
    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
    text = pdfReader.getPage(0).extractText()
    if (text.find('Government Of India') == -1):
        return 'A'
    else:
        return 'B'

if __name__ == "__main__":
    # set path for pytesseract
    pytesseract.pytesseract.tesseract_cmd = r'C:\Users\visheshAgrahari\AppData\Local\Tesseract-OCR\tesseract.exe'
    # input file location
    pdfLoc = 'input file\\ujjwalewaybill.pdf'
    # convert all pages of pdf into images
    n = convert_pdf_to_image(pdfLoc)
    pattern = checkPdfPattern(pdfLoc)
    if(pattern=='A'):
        # extract text data from pdf- partA
        keys = extract_keysA('pdf2image\\page0.jpg')
        values = extract_valuesA(n,keys[1:])
        write_to_csv(keys, values, 'output\\TextCsvData.csv')
        write_to_json('output\\TextCsvData.csv', 'output\\CombineJsonData.json', 'w', 'TextDetails')
        write_to_excel('output\\TextCsvData.csv', 'output\\CombineExcelData.xlsx', 'TextDetails', 'w')
        # extract data from table present in part-B section
        convertTableIntoCsv(pdfLoc,n)
        fields = extractTableFieldsA()
        rows = extractTableValuesA(n)
        write_to_csv(fields,rows, 'output\\TableCsvData.csv')
        write_to_json('output\\TableCsvData.csv', 'output\\CombineJsonData.json', 'a', 'Tabledata')
        write_to_excel('output\\TableCsvData.csv','output\\CombineExcelData.xlsx','Tabledata','a')
    else:
        # extract text data from pdf- partA
        keys = extract_keysB()
        values = extract_valuesB(pdfLoc, keys[1:10])
        write_to_csv(keys, values, 'output\\TextCsvData.csv')
        write_to_json('output\\TextCsvData.csv', 'output\\CombineJsonData.json', 'w', 'TextDetails')
        write_to_excel('output\\TextCsvData.csv', 'output\\CombineExcelData.xlsx', 'TextDetails', 'w')
        # extract data from Goods Details and Vehicle Details
        convertTableIntoCsv(pdfLoc, n)
        fields = extractTableFieldsB("temptablecsv\\temp_data1.csv")
        rows = extractTableValuesB(n)
        write_to_csv(fields[0], rows[0], 'output\\Goods Details.csv')
        write_to_csv(fields[1], rows[1], 'output\\Vehicle Details.csv')
        write_to_json('output\\Goods Details.csv', 'output\\CombineJsonData.json', 'a', 'Goods Details')
        write_to_json('output\\Vehicle Details.csv', 'output\\CombineJsonData.json', 'a', 'Vehicle Details')
        write_to_excel('output\\Goods Details.csv', 'output\\CombineExcelData.xlsx', 'Goods Details', 'a')
        write_to_excel('output\\Vehicle Details.csv', 'output\\CombineExcelData.xlsx', 'Vehicle Details', 'a')
    # extract qrcode and barcode data from pdf
    qrCodeData_and_barCodeData = extractQrDataBarCodeData(n)
    qrcode_keys_and_values = extract_Keys_And_Values_Qrcodedata(qrCodeData_and_barCodeData[0])
    write_to_csv(qrcode_keys_and_values[0], qrcode_keys_and_values[1], 'output\\QrCodeCsv.csv')
    barcode_keys_and_values = extract_Keys_And_Values_Barcodedata(qrCodeData_and_barCodeData[1])
    write_to_csv(barcode_keys_and_values[0], barcode_keys_and_values[1], 'output\\BarCodeCsv.csv')
    write_to_json('output\\QrCodeCsv.csv', 'output\\CombineJsonData.json', 'a', 'QRCode Data')
    write_to_json('output\\BarCodeCsv.csv', 'output\\CombineJsonData.json', 'a', 'BarCode Data')
    write_to_excel('output\\QrCodeCsv.csv', 'output\\CombineExcelData.xlsx', 'QRCode Data', 'a')
    write_to_excel('output\\BarCodeCsv.csv', 'output\\CombineExcelData.xlsx', 'BarCode Data', 'a')


